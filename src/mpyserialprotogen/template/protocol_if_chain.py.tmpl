#* main entry

#load "utils.texhon" as utils
#import mpyserialprotogen.template.utils as py_utils


#template main( config_dict, class_name, send_messages, receive_messages, output_dir )
#!
#!  message_id_type = config_dict['message_id_type']
#!  package_name = config_dict['package_name']
#!
#!
\#
\# File was automatically generated using 'mpyserialprotogen'
\#
\# Project website: https://github.com/anetczuk/mpython-serial-protogen
\#

#! py_utils.copy_file( "static/channel.py", output_dir + "/" )
#! py_utils.copy_file( "static/logger.py", output_dir + "/" )
from ${package_name}.channel import AbstractChannel


\# pylint: disable=C0103


class $class_name:
    def __init__(self, channel: AbstractChannel):
        self.channel: AbstractChannel = channel  # communication medium

    def wait_message(self):
        while True:
            message = self.receive_message()
            if message is None:
                # no message
                continue
            if message[0] is None:
                # unknown message
                continue
            return message

    def wait_message_type(self, message_type):
        while True:
            message = self.receive_message()
            if message is None:
                # no message
                continue
            if message[0] is not message_type:
                # message type not match
                continue
            return message

    def receive_message(self):
#{  if message_id_type == "str": 
        command = self.channel.read_text()
#}
#{  else:
        command = self.channel.read_byte()
#}

        if command is None:
            # no incoming message (timeout)
            return None

#{  for message_def in receive_messages:
#! 		message_id = message_def['id']
#! 		message_value = message_def['value']
#!      message_params = message_def['fields']
        # $message_id
#{		if message_params:
        ## parameters:
#{			for param in message_params:
        ##    ${ param['id'] }: ${ param['type'] }
#}
#}
        if command == $message_value:
#{		if message_params:
#{		    for param in message_params:
                $<${ read_param(param) }
#}
#!          field_names    = message_def['field_names']
#!          params_header  = utils.params_explode( field_names )
            return [command, $params_header]
#}
#{		else:
            # no fields
            return [command]
#}

#}
        self._handle_unknown_command(command)

        # unknown message
        return [None, command]

    def _handle_unknown_command(self, command):
        # override if needed
        pass

    ## ============= send methods ===============
$>
#{	for message_def in send_messages:
#!  	message_id     = message_def['id']
#!  	message_value  = message_def['value']
#!      message_params = message_def['fields']
#!      field_names    = message_def['field_names']
#!      params_header  = utils.params_explode( [ "self" ] + field_names )

    ## send '$message_id' message
#{		if message_params:
    ## parameters:
#{			for param in message_params:
    ##    ${ param['id'] }: ${ param['type'] }
#}
#}
    def send_$message_id($params_header):
#{      if message_id_type == "str": 
        self.channel.write_text($message_value)
#}
#{      else:
        self.channel.write_byte($message_value)  # "$message_id"
#}
#{		for param in message_params:
            $<${ write_param(param) }
#}
#}
#end template


#template read_param( param_data )
#!  param_id = param_data['id']
#! 	param_type = param_data["type"]
#{	if param_type == "bool":
            $param_id = self.channel.read_byte()$>
#}
#{	elif param_type == "byte":
            $param_id = self.channel.read_byte()$>
#}
#{	elif param_type == "int8":
            $param_id = self.channel.read_int(1)$>
#}
#{	elif param_type == "int16":
            $param_id = self.channel.read_int(2)$>
#}
#{	elif param_type == "int32":
            $param_id = self.channel.read_int(4)$>
#}
#{	elif param_type == "bytearray":
            data_size = self.channel.read_int(2)
            $param_id = self.channel.read_bytes(data_size)$>
#}
#{	elif param_type == "str":
            $param_id = self.channel.read_text()$>
#}
#{  else:
		    # unknown param type '${param_type}' for '${param_id}'$>
#!      raise RuntimeError(f"unknown param type '{param_type}' for '{param_id}'")
#}
#end template


#template write_param( param_data )
#!  param_id = param_data['id']
#! 	param_type = param_data["type"]
#{	if param_type == "bool":
        self.channel.write_byte($param_id)$>
#}
#{	elif param_type == "byte":
        self.channel.write_byte($param_id)$>
#}
#{	elif param_type == "int8":
        self.channel.write_int($param_id, 1)$>
#}
#{	elif param_type == "int16":
        self.channel.write_int($param_id, 2)$>
#}
#{	elif param_type == "int32":
        self.channel.write_int($param_id, 4)$>
#}
#{	elif param_type == "bytearray":
        self.channel.write_int(len($param_id), 2)
        self.channel.write_bytes($param_id)$>
#}
#{	elif param_type == "str":
        self.channel.write_text($param_id)$>
#}
#{ else:
		# unknown param type '${param_type}' for '${param_id}'$>
#!      raise RuntimeError(f"unknown param type '{param_type}' for '{param_id}'")
#}
#end template
